{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware/locale.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { match } from \"@formatjs/intl-localematcher\";\nimport Negotiator from \"negotiator\";\n\nconst supportedLocales = [\"de\", \"en\"];\nconst defaultLocale = \"de\";\n\nfunction getLocale(request: NextRequest) {\n  const negotiatorHeaders: Record<string, string> = {};\n  request.headers.forEach((value, key) => {\n    negotiatorHeaders[key] = value;\n  });\n  const negotiator = new Negotiator({ headers: negotiatorHeaders });\n  const acceptedLanguages = negotiator.languages();\n  return match(acceptedLanguages, supportedLocales, defaultLocale);\n}\n\nexport function localeMiddleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n\n  // Ignoriere Assets und API-Routen\n  if (\n    pathname.startsWith(\"/_next/\") ||\n    pathname.startsWith(\"/api\") ||\n    pathname.startsWith(\"/logo\")\n  ) {\n    return null;\n  }\n\n  // Prüfe ob bereits eine Locale vorhanden ist\n  const hasLocale = supportedLocales.some(\n    (locale) => pathname === `/${locale}` || pathname.startsWith(`/${locale}/`)\n  );\n\n  if (!hasLocale) {\n    const locale = getLocale(request);\n    const newUrl = new URL(`/${locale}${pathname}`, request.url);\n    return NextResponse.redirect(newUrl);\n  }\n\n  return null;\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEA,MAAM,mBAAmB;IAAC;IAAM;CAAK;AACrC,MAAM,gBAAgB;AAEtB,SAAS,UAAU,OAAoB;IACrC,MAAM,oBAA4C,CAAC;IACnD,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;QAC9B,iBAAiB,CAAC,IAAI,GAAG;IAC3B;IACA,MAAM,aAAa,IAAI,2IAAA,CAAA,UAAU,CAAC;QAAE,SAAS;IAAkB;IAC/D,MAAM,oBAAoB,WAAW,SAAS;IAC9C,OAAO,CAAA,GAAA,2LAAA,CAAA,QAAK,AAAD,EAAE,mBAAmB,kBAAkB;AACpD;AAEO,SAAS,iBAAiB,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,kCAAkC;IAClC,IACE,SAAS,UAAU,CAAC,cACpB,SAAS,UAAU,CAAC,WACpB,SAAS,UAAU,CAAC,UACpB;QACA,OAAO;IACT;IAEA,6CAA6C;IAC7C,MAAM,YAAY,iBAAiB,IAAI,CACrC,CAAC,SAAW,aAAa,CAAC,CAAC,EAAE,QAAQ,IAAI,SAAS,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IAG5E,IAAI,CAAC,WAAW;QACd,MAAM,SAAS,UAAU;QACzB,MAAM,SAAS,IAAI,IAAI,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE,QAAQ,GAAG;QAC3D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getSessionCookie } from \"better-auth/cookies\";\nimport { localeMiddleware } from \"./middleware/locale\";\n\nexport async function middleware(request: NextRequest) {\n  const localeResponse = localeMiddleware(request);\n  if (localeResponse) {\n    return localeResponse;\n  }\n\n  const sessionCookie = getSessionCookie(request);\n\n  if (!sessionCookie) {\n    return NextResponse.redirect(new URL(\"/de/landing\", request.url));\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\"/en\", \"/de\"], // nur diese Routen werden geschützt\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,iBAAiB,CAAA,GAAA,mIAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,IAAI,gBAAgB;QAClB,OAAO;IACT;IAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,mBAAgB,AAAD,EAAE;IAEvC,IAAI,CAAC,eAAe;QAClB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,QAAQ,GAAG;IACjE;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAO;KAAM;AACzB"}}]
}